{"version":3,"sources":["ui/PlutoStyle.js","ui/Spinner.js","views/Index.js","views/FAQ.js","views/Packages.js","App.js","reportWebVitals.js","index.js"],"names":["PlutoStyle","children","className","Spinner","style","position","Notebook","file","author","path","interactive","onRemove","href","flexGrow","onClick","title","IndexView","props","useState","uploadPath","setUploadPath","localStorage","getItem","setAuthor","uploadLoading","setUploadLoading","uploadComplete","setUploadComplete","uploadResponse","setUploadResponse","uploadError","setUploadError","getRecentUploads","recentUploads","setRecentUploadsState","notebooks","setNotebooks","filepickerRef","useRef","useEffect","fetch","then","response","json","body","catch","console","log","marginTop","to","display","ref","type","id","hidden","onChange","e","target","value","split","reverse","htmlFor","readOnly","placeholder","formData","FormData","append","current","files","length","setItem","method","unshift","JSON","stringify","setRecentUploads","err","margin","textAlign","marginRight","map","notebook","_id","parse","FAQView","PackagesView","App","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.111f01e5.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './PlutoStyle.scss';\r\n\r\nfunction PlutoStyle({ children }) {\r\n    return (\r\n        <section className=\"PlutoStyle\">\r\n            {children}\r\n        </section>\r\n    )\r\n}\r\nPlutoStyle.propTypes = {\r\n    children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default PlutoStyle;\r\n","import React from 'react';\r\nimport './Spinner.scss';\r\n\r\nexport default function Spinner({ style, className='' }) {\r\n    return (\r\n        <div style={{position: 'relative', ...style}} className={className}>\r\n            <div className=\"spinner\"/>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PlutoStyle from '../ui/PlutoStyle';\r\nimport Spinner from '../ui/Spinner';\r\nimport './Index.scss';\r\n\r\n\r\nconst Notebook = ({file, author, path, interactive, onRemove}) => (\r\n    <div className=\"Notebook\">\r\n        <a href={`/nb/${path}`}>\r\n            <h4>{file}&nbsp;&nbsp;{interactive ? '⚡' : ''}</h4>\r\n            <span>{author}</span>\r\n        </a>\r\n        <div style={{flexGrow: 1}}/>\r\n        {onRemove && <button className={'anti-button'} onClick={onRemove} title=\"Remove\">╳</button>}\r\n    </div>\r\n);\r\n\r\nexport default function IndexView({ props }) {\r\n    const [uploadPath, setUploadPath] = useState(null);\r\n    const [author, setAuthor] = useState(localStorage.getItem('author') || '');\r\n    const [uploadLoading, setUploadLoading] = useState(false);\r\n    const [uploadComplete, setUploadComplete] = useState(false);\r\n    const [uploadResponse, setUploadResponse] = useState(null);\r\n    const [uploadError, setUploadError] = useState(null);\r\n    const [recentUploads, setRecentUploadsState] = useState(getRecentUploads());\r\n    const [notebooks, setNotebooks] = useState([]);\r\n    const filepickerRef = useRef();\r\n\r\n    useEffect(() => {\r\n        fetch(`/api/notebooks`)\r\n            .then(response => response.json())\r\n            .then(body => setNotebooks(body))\r\n            .catch(console.log);\r\n    }, [recentUploads]);\r\n\r\n    function handleUploadChange(e) {\r\n        setUploadPath(e.target.value.split(/[/\\\\]/g).reverse()[0]);\r\n    }\r\n    function handleUpload() {\r\n        const formData = new FormData();\r\n        formData.append('notebook', filepickerRef.current.files[0]);\r\n        formData.append('author', author.length === 0 ? 'Anonymous' : author);\r\n\r\n        localStorage.setItem('author', author);\r\n        \r\n        setUploadLoading(true);\r\n\r\n        fetch(`/api/notebooks`, {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n            .then(response => response.json())\r\n            .then(body => {\r\n                setUploadResponse(body);\r\n                recentUploads.unshift(body);\r\n                setRecentUploads(recentUploads);\r\n                setRecentUploadsState(getRecentUploads());\r\n\r\n                setUploadLoading(false);\r\n                setUploadComplete(true);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                setUploadLoading(false);\r\n                setUploadError(true);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className=\"Index-root\">\r\n            <PlutoStyle>\r\n                <section>\r\n                    <h1 style={{marginTop: '1.5em'}}>Publish Pluto!</h1>\r\n                    <p>\r\n                        Share your Pluto notebooks like never before! Simply drag your notebook file somewhere on this page and we'll do the rest. Interactivity with <code>@bind</code> is supported out-of-the-box.\r\n                    </p>\r\n                    <p>\r\n                        If your notebook requires certain external packages see this article for publishing notebooks with <a href=\"\">package installation instructions included</a>. Even so certain packages may still fail to work properly, in which case you must also upload a <Link to=\"/faq#state-files\">Pluto state file</Link> alongside your notebook file.\r\n                    </p>\r\n                </section>\r\n                <section>\r\n                    <h2>📓 Upload Your Notebook</h2>\r\n                    <div style={{display: uploadPath ? 'none' : 'block'}}>\r\n                        <input ref={filepickerRef} type=\"file\" id=\"notebook-upload\" hidden onChange={handleUploadChange}/>\r\n                        <label htmlFor=\"notebook-upload\" className=\"notebook-upload-label\">Click or drag a file here</label>\r\n                    </div>\r\n                    { uploadPath && (\r\n                        <div className=\"notebook-placeholder\">\r\n                            <div className=\"notebook-title\">\r\n                                <h3>{uploadPath}</h3>\r\n                                <input type=\"text\" value={author} readOnly={(uploadLoading || uploadComplete) ? true : false} placeholder=\"Add an author...\" onChange={(e) => setAuthor(e.target.value)}/>\r\n                            </div>\r\n                            <div style={{flexGrow: 1}}/>\r\n                            { !uploadLoading && !uploadComplete && !uploadError && <>\r\n                                <button className=\"upload-button\" onClick={handleUpload}>Upload</button>\r\n                                <a onClick={() => {\r\n                                    setUploadPath(null);\r\n                                    filepickerRef.current.value = '';\r\n                                }} title=\"Cancel\">╳</a>\r\n                            </>}\r\n                            { uploadLoading && !uploadComplete && <>\r\n                                <span style={{margin: 'auto 45px auto 0', textAlign: 'center'}}>This may take a while.<br></br><a href=\"/faq\" target=\"_blank\">Learn More</a></span>\r\n                                <Spinner style={{marginRight: 15}}/>\r\n                            </>}\r\n                            { uploadComplete && <>\r\n                                <span style={{margin: 'auto 25px auto 0', textAlign: 'center'}}>Your notebook is published!<br/><a href={`/nb/${uploadResponse.path}`}>See it live</a></span>\r\n                                <button onClick={() => {\r\n                                    filepickerRef.current.value = '';\r\n                                    setUploadPath(null);\r\n                                    setUploadComplete(false);\r\n                                }}>Hooray! 🎉</button>\r\n                            </>}\r\n                            { uploadError && <>\r\n                                <span style={{margin: 'auto 25px auto 0', textAlign: 'center'}}>There was an error. (┬┬﹏┬┬)</span>\r\n                                <button onClick={() => {\r\n                                    setUploadError(null);\r\n                                }}>Go back</button>\r\n                            </>}\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* { recentUploads.length > 0 && <>\r\n                        <h3>Recent Uploads</h3>\r\n                        { recentUploads.map((notebook, i) => (\r\n                            <Notebook key={notebook._id} onRemove={() => {\r\n                                recentUploads.splice(i, 1);\r\n                                setRecentUploads(recentUploads);\r\n                                setRecentUploadsState(getRecentUploads());\r\n                            }} {...notebook}/>\r\n                        ))}\r\n                    </>} */}\r\n                </section>\r\n                <section>\r\n                    <h2>🔥 Notebooks</h2>\r\n                    { notebooks.length > 0 && notebooks.map((notebook) => (\r\n                        <Notebook key={notebook._id} {...notebook}/>\r\n                    ))}\r\n                </section>\r\n            </PlutoStyle>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// Right now this is done through localStorage, although it will likely become user-based\r\n// once user authentication becomes supported\r\nfunction getRecentUploads() {\r\n    try {\r\n        return JSON.parse(localStorage.getItem('recentUploads') || '[]');\r\n    }\r\n    catch(e) {\r\n        return [];\r\n    }\r\n}\r\nfunction setRecentUploads(recentUploads) {\r\n    localStorage.setItem('recentUploads', JSON.stringify(recentUploads));\r\n}\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport PlutoStyle from '../ui/PlutoStyle';\r\n\r\nexport default function FAQView() {\r\n    return (\r\n        <PlutoStyle>\r\n            <h1>FAQ</h1>\r\n            \r\n            <section>\r\n                <h2>How does this service work?</h2>\r\n                <p>\r\n                    At it's core this service simply converts your notebook to an HTML file, then runs it online with <a href=\"https://github.com/JuliaPluto/PlutoSliderServer.jl\">PlutoSliderServer.jl</a>. Doing so at large scale and allowing anyone to upload their notebook is where this service distinguishes itself.\r\n                </p>\r\n            </section>\r\n            <section>\r\n                <h2>How many notebooks can I upload?</h2>\r\n                <p>\r\n                    For the time being, as many as you want! As demand fluctuates in the future this may or may not remain true, given the strain that processing notebook submissions can have.\r\n                </p>\r\n            </section>\r\n            <section>\r\n                <h2>Can I delete or update existing notebooks?</h2>\r\n                <p>\r\n                    Not currently, since we have no way to verify you as the original author. Feel free to just submit an updated notebook as a new notebook though.\r\n                </p>\r\n                <p>\r\n                    Depending on demand and usage we may implement a user authentication system, which would solve these problems at the cost of an additional step for the user.\r\n                </p>\r\n            </section>\r\n            <section>\r\n                <h2>Why does my notebook have errors?</h2>\r\n                <p>\r\n                    Assuming everything works on your local Pluto editor, there are a few things that could be happening. Firstly, if your notebook requires external packages that aren't listed <Link to=\"/packages\">here</Link>, you'll need to make a few modifications to your notebook to tell us how to install them.\r\n                </p>\r\n                <p>\r\n                    References to local files will also not work, meaning you'll have to either include the contents of those files in the notebook somewhere, or download them inside the notebook from a public location such as <a target=\"_blank\" href=\"https://pages.github.com/\">GitHub Pages</a>.\r\n                </p>\r\n            </section>\r\n            <section>\r\n                <h2 id=\"state-files\">What are Pluto state files?</h2>\r\n                <p>\r\n                    Fundamentally a Pluto notebook, unlike a Jupyter notebook, stores no cell outputs. Although this has numerous benefits for file format, it makes publishing services like this one difficult to manage. In order to obtain cell outputs we must run each notebook in a secure and isolated environment, which causes problems for some notebooks. If for whatever reason our service can't run your notebook, you can still publish it by providing us with a file containing cell outputs. This is exactly what a Pluto state file does.\r\n                </p>\r\n                <p>\r\n                    There are a few caveats to this approach though, the main one being we cannot make notebooks interactive if they cannot be run on our service. Viewing features will still work fine, but sliders, text inputs, or any other cell using <code>@bind</code> will not work.\r\n                </p>\r\n            </section>\r\n        </PlutoStyle>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PlutoStyle from '../ui/PlutoStyle';\r\n\r\nexport default function PackagesView() {\r\n    return (\r\n        <PlutoStyle>\r\n            <h1>Installed Packages</h1>\r\n            <p>Check back soon! We haven't compiled the list yet... 🙁</p>\r\n        </PlutoStyle>\r\n    );\r\n}\r\n","import './App.scss';\r\nimport IndexView from './views/Index';\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\nimport FAQView from './views/FAQ';\r\nimport PackagesView from './views/Packages';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <IndexView/>\r\n        </Route>\r\n        <Route exact path=\"/faq\">\r\n          <FAQView/>\r\n        </Route>\r\n        <Route exact path=\"/packages\">\r\n          <PackagesView/>\r\n        </Route>\r\n        <Redirect to=\"/\"/>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}